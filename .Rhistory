str(carPrice)
head(carPrice)
glimpse(carPrice)
head(carPrice)
obs4 <- carPrice %>% select(`Fuel type`)
##Checking categorical values
fueltypetrial <- as.character(unique(obs4))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
trial <- map_df(obs4, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
carPrice
glimpse(carPrice)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(`Fuel type`)
fueltypetrial <- as.character(unique(obs4))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
trial <- map_df(obs4, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
##removing outliers
boxplot(carPrice)
##removing outliers
boxplot(carPrice)
##removing outliers
boxplot(carPrice-2)
summary(carPrice$`Fuel type`)
##removing column
carPriceClean[ <-[c(1,3,4,5,6,7)]
##removing column
carPriceClean <-[c(1,3,4,5,6,7)]
##removing column
carPriceClean <-carPrice[c(1,3,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
##removing column
carPriceClean <-carPrice[c(1,3,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
carPrice[6]<- trial
glimpse(carPrice)
##removing column
carPriceClean <-carPrice[c(1,3,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
##removing column
carPriceClean <-carPrice[c(1,2,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
#Importing data set
library(readxl)
carPrice <- read_excel("C:\\Users\\khalida\\Documents\\Business Statistic\\Document\\Car Price\\Data\\carPrice.xlsx",
n_max = 111)
##View(carPrice)
##carPrice
str(carPrice)
head(carPrice)
glimpse(carPrice)
head(carPrice)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(`Fuel type`)
fueltypetrial <- as.character(unique(obs4))
fueltypetrial <- as.character(unique(obs4))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
trial <- map_df(obs4, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
##removing column
carPriceClean <-carPrice[c(1,2,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
fueltypetrial <- as.character(unique(obs1))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
trial <- map_df(obs1, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
fueltypetrial <- as.character(unique(fuelcat))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
trial <- map_df(obs1, fueltypeFunc) %>% glimpse
fueltypetrial <- as.character(unique(fuelcat))
}
fueltypetrial
fueltypetrial <- as.character(unique(fuelcat))
fueltypetrial
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
fueltypetrial <- as.character(unique(fuelcat))
fueltypetrial
fueltypetrial <- as.character(unique(trial)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
fueltypetrial <- as.character(unique(fuelTypeOnly)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
#Importing data set
library(readxl)
carPrice <- read_excel("C:\\Users\\khalida\\Documents\\Business Statistic\\Document\\Car Price\\Data\\carPrice.xlsx",
n_max = 111)
##View(carPrice)
##carPrice
str(carPrice)
head(carPrice)
glimpse(carPrice)
head(carPrice)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
fueltypetrial <- as.character(unique(fuelTypeOnly)
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
carPrice <- read_excel("C:\\Users\\khalida\\Documents\\Business Statistic\\Document\\Car Price\\Data\\carPrice.xlsx",
n_max = 111)
##View(carPrice)
##carPrice
str(carPrice)
head(carPrice)
glimpse(carPrice)
head(carPrice)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
fueltypetrial <- as.character(unique(fuelTypeOnly)
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
fueltypetrial <- as.character(unique(fuelTypeOnly))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
trial <- map_df(fuelTypeOnly, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
##removing column
carPriceClean <-carPrice[c(1,2,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
##Linear Modelling
linearmodel = lm(carPriceClean$`Car's price'-carPriceclean$Index+ carPriceClean$`EgineCapacity`+carPriceClean$`Speed(KM/h)`+ carPriceClean$`Fuel type`+carPriceClean$`Fuel Score (zł/KM)`,data= carPriceClean)
##Linear Modelling
linearmodel <- lm(carPriceClean$`Car's price'-carPriceclean$Index+ carPriceClean$`EgineCapacity`+carPriceClean$`Speed(KM/h)`+ carPriceClean$`Fuel type`+carPriceClean$`Fuel Score (zł/KM)`,data= carPriceClean)
##Linear Modelling
linearmodel <- lm(carPriceClean$'price'-carPriceclean$Index+ carPriceClean$`EgineCapacity`+carPriceClean$`Speed'+ carPriceClean$`FuelType`+carPriceClean$`FuelScore')`,data= carPriceClean)
##Linear Modelling
linearmodel <- lm(carPriceClean$Price~carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summarise(linearmodel)
##Linear Modelling
linmodel <- lm(carPriceClean$Price~carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summarise(linmodel)
summary(linmodel)
##Linear Modelling
linmodel <- lm(carPriceClean$Price-carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
glimpse(carPriceClean)
##Linear Modelling
linmodel <- lm(carPriceClean$Price-carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
##Linear Modelling
linmodel <- lm(carPriceClean$Price~`carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
glimpse(carPriceClean)
##Linear Modelling
linmodel <- lm(carPriceClean$Price~`carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
##Linear Modelling
linmodel <- lm(carPriceClean$Price-`carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
##Linear Modelling
linmodel <- lm(carPriceClean$Price-carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
carPriceClean
carPriceClean
carPriceClean
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
##removing column
carPriceClean <-carPrice[c(1,2,4,5,6,7)]
carPriceClean
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
##removing column
carPriceClean <-carPrice[c(1,2,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
##Linear Modelling
linmodel <- lm(carPriceClean$Price-carPriceClean$Index+carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
trial <- map_df(fuelTypeOnly, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
##removing column
carPriceClean <-carPrice[c(1,2,4,5,6,7)]
carPriceClean
carPrice <- read_excel("C:\\Users\\khalida\\Documents\\Business Statistic\\Document\\Car Price\\Data\\carPrice.xlsx",
n_max = 111)
##View(carPrice)
##carPrice
str(carPrice)
head(carPrice)
glimpse(carPrice)
head(carPrice)
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
fueltypetrial <- as.character(unique(fuelTypeOnly))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
trial <- map_df(fuelTypeOnly, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
head(carPrice)
carPrice <- read_excel("C:\\Users\\khalida\\Documents\\Business Statistic\\Document\\Car Price\\Data\\carPrice.xlsx",
n_max = 111)
##View(carPrice)
##carPrice
str(carPrice)
#Data Source :https://www.wyborkierowcow.pl/moc-w-przeliczeniu-na-zlotowki-zestawienie/
#MED Project
# dependent var(Y)= price
# independent Var(X)= speed, fueltype, fuelscore, enginecapacity
library(markdown)
library(dplyr)
library (ggplot2)
library(tidyverse)
library(psych)
library(GPArotation)
library(knitr)
install.packages("Metrics")
#data Preparation
library(readxl)
carPrice <- read_excel("C:\\Users\\khalida\\Documents\\Business Statistic\\Document\\Car Price\\Data\\carPrice.xlsx",
n_max = 111)
##View(carPrice)
##carPrice
str(carPrice)
##View(carPrice)
##carPrice
str(carPrice)
head(carPrice)
glimpse(carPrice)
head(carPrice)
nrow(carPrice)
##removing column
carPriceClean <-carPrice[c(2,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
#converting fueltype into numerical var
trial <- map_df(fuelTypeOnly, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
##Checking categorical values
fuelTypeOnly <- carPrice %>% select(FuelType)
fueltypetrial <- as.character(unique(fuelTypeOnly))
fueltypetrial
##function changing fueltype from categorical into numerical
fueltypeFunc <- function(x, fueltypetrial){
factor(x, levels = fueltypetrial, labels = fueltypetrial, ordered = TRUE)
}
#converting fueltype into numerical var
trial <- map_df(fuelTypeOnly, fueltypeFunc) %>% glimpse
trial <- map_df(trial, as.numeric)%>% glimpse
carPrice[6]<- trial
glimpse(carPrice)
##removing column
carPriceClean <-carPrice[c(2,4,5,6,7)]
carPriceClean
glimpse(carPriceClean)
##Linear Model
linmodel <- lm(carPriceClean$Price~carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
linmodel
plot(linmodel)
plot(linmodel)
set.seed(123)
training.samples <- carPriceClean$Price %>%
createDataPartition(p = 0.8, list = FALSE)
library(caret)
training.samples <- carPriceClean$Price %>%
createDataPartition(p = 0.8, list = FALSE)
#cross Validation 1
set.seed(123)
training.samples <- carPriceClean$Price %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- carPriceClean[training.samples, ]
test.data <- carPriceClean[-training.samples, ]
# Build the model
model <- lm(Price ~., data = train.data)
# Make predictions and compute the R2, RMSE and MAE
predictions <- model %>% predict(test.data)
data.frame( R2 = R2(predictions, test.data$Price),
RMSE = RMSE(predictions, test.data$Price),
MAE = MAE(predictions, test.data$Price))
#prediction error rate
RMSE(predictions, test.data$Price)/mean(test.data$Price)
head <-
# Define training control
train.control <- trainControl(method = "LOOCV")
#Leave one out cross validation - LOOCV
# Define training control
train.control <- trainControl(method = "LOOCV")
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
#K-fold cross-validation
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 3)
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
#######################################################################
# Define training control
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 3, repeats = 3)
# Train the model
model <- train(Price ~., data = carPrice, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
#linearequation y= mx+b
predictedPriceVolkswagenGolfGTI <--58887.488+ (1984*-2.526)+(245 *481.112)+(522*129.323)
predictedPriceVolkswagenGolfGTI
#######################################################################
# Define training control
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 3, repeats = 3)
# Train the model
model <- train(Price ~., data = carPrice, method = "lm",
trControl = train.control)
#######################################################################
# Define training control
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 3, repeats = 3)
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
print(predictions)
View(carPriceClean)
View(carPriceClean)
print(test.data$Price)
View(carPrice)
View(carPrice)
View(test.data)
View(test.data)
View(test.data)
View(test.data)
##########################################################
#VAlidation set approach
set.seed(123)
training.samples <- carPriceClean$Price %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- carPriceClean[training.samples, ]
test.data <- carPriceClean[-training.samples, ]
# Build the model
model <- lm(Price ~., data = train.data)
# Make predictions and compute the R2, RMSE and MAE
predictions <- model %>% predict(test.data)
data.frame( R2 = R2(predictions, test.data$Price),
RMSE = RMSE(predictions, test.data$Price),
MAE = MAE(predictions, test.data$Price))
print(test.data$Price)
#prediction error rate
RMSE(predictions, test.data$Price)/mean(test.data$Price)
#Leave one out cross validation - LOOCV
# Define training control
train.control <- trainControl(method = "LOOCV")
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
#K-fold cross-validation
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 3)
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
#######################################################################
# Define training control
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 3, repeats = 3)
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
#linearequation y= mx+b
predictedPriceVolkswagenGolfGTI <--58887.488+ (1984*-2.526)+(245 *481.112)+(522*129.323)
predictedPriceVolkswagenGolfGTI
#linearequation y= mx+b
predictedPriceVolkswagenGolfGTI <--58887.488+ (1984*-2.526)+(245 *481.112)+(522*129.323)
predictedPriceVolkswagenGolfGTI
#mse
mse()
##plot(carPrice$Price~carPrice$EngineCapacity,data= carPrice)
#linearequation y= mx+b
predictedPriceVolkswagenGolfGTI <--58887.488+ (1984*-2.526)+(245 *481.112)+(522*129.323)
predictedPriceVolkswagenGolfGTI
#linearequation y= mx+b
predictedPriceVolkswagenGolfGTI <--58887.488+ (1984*-2.526)+(245 *481.112)+(522*129.323)
predictedPriceVolkswagenGolfGTI
summary(linmodel)
linmodel
View(training.samples)
View(training.samples)
View(training.samples)
View(train.data)
View(train.data)
View(train.data)
View(test.data)
View(test.data)
View(training.samples)
View(training.samples)
View(train.data)
View(train.data)
View(test.data)
View(test.data)
test.data
dataframetrial <- (test.data, predictions)
dataframetrial <- (test.data, predictions)
data.frame(test.data, predictions)
data.frame( R2 = R2(predictions, test.data$Price),
RMSE = RMSE(predictions, test.data$Price),
MAE = MAE(predictions, test.data$Price))
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
#Leave one out cross validation - LOOCV
# Define training control
train.control <- trainControl(method = "LOOCV")
# Train the model
model <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
model
print(model)
train.control
# Summarize the results
print(model)
#Leave one out cross validation - LOOCV
# Define training control
train.control <- trainControl(method = "LOOCV")
# Train the model
modelLOOCV <- train(Price ~., data = carPriceClean, method = "lm",
trControl = train.control)
# Summarize the results
print(modelLOOCV)
View(modelLOOCV)
View(modelLOOCV)
modelLOOCV$pred
#sum
summary(model)
##Linear Model
linmodel <- lm(carPriceClean$Price~carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
##Linear Model
linmodel <- lm(carPriceClean$Price~carPriceClean$EngineCapacity+carPriceClean$Speed+carPriceClean$FuelType+carPriceClean$FuelScore,data = carPriceClean)
summary(linmodel)
linmodel
model
